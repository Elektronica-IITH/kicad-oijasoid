# name: PCB Check and Score Calculation
# on:
#   push:
#     branches:
#       - main  
# jobs:
#   check-pcb:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: write
#       checks: write
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3
        
#       - name: Install KiCad 8
#         run: |
#           sudo apt update
#           sudo apt install -y software-properties-common
#           sudo add-apt-repository --yes ppa:kicad/kicad-8.0-releases
#           sudo apt update
#           sudo apt install -y --no-install-recommends kicad
      
#       - name: Create Output Directory
#         run: mkdir -p pcb_checks

#       - name: Find KiCad Files
#         id: find-files
#         run: |
#           SCH_FILE=$(find . -name "*.kicad_sch" | head -n 1)
#           PCB_FILE=$(find . -name "*.kicad_pcb" | head -n 1)
#           if [ -z "$SCH_FILE" ] || [ -z "$PCB_FILE" ]; then
#             echo "FINAL_SCORE=0" >> $GITHUB_ENV
#             echo "NO_SUBMISSION=true" >> $GITHUB_ENV
#             exit 0
#           fi
#           echo "sch_file=$SCH_FILE" >> $GITHUB_ENV
#           echo "pcb_file=$PCB_FILE" >> $GITHUB_ENV

#       - name: Run ERC Check
#         if: env.NO_SUBMISSION != 'true'
#         id: erc-check
#         run: |
#           kicad-cli sch erc "$sch_file" > pcb_checks/erc_output.txt 2>&1 || true
#           grep "Error" pcb_checks/erc_output.txt > pcb_checks/erc_errors.txt || true
#           grep "Warning" pcb_checks/erc_output.txt > pcb_checks/erc_warnings.txt || true
#           echo "erc_errors=$(wc -l < pcb_checks/erc_errors.txt)" >> $GITHUB_ENV
#           echo "erc_warnings=$(wc -l < pcb_checks/erc_warnings.txt)" >> $GITHUB_ENV

#       - name: Run DRC Check
#         if: env.NO_SUBMISSION != 'true'
#         id: drc-check
#         run: |
#           kicad-cli pcb drc "$pcb_file" > pcb_checks/drc_output.txt 2>&1 || true
#           grep "Error" pcb_checks/drc_output.txt > pcb_checks/drc_errors.txt || true
#           grep "Warning" pcb_checks/drc_output.txt > pcb_checks/drc_warnings.txt || true
#           echo "drc_errors=$(wc -l < pcb_checks/drc_errors.txt)" >> $GITHUB_ENV
#           echo "drc_warnings=$(wc -l < pcb_checks/drc_warnings.txt)" >> $GITHUB_ENV

#       - name: Calculate Score
#         id: score-calc
#         run: |
#           if [ "$NO_SUBMISSION" = "true" ]; then
#             echo "FINAL_SCORE=0" >> $GITHUB_ENV
#             echo "ERROR_DEDUCTION=100" >> $GITHUB_ENV
#             echo "WARNING_DEDUCTION=0" >> $GITHUB_ENV
#             exit 0
#           fi
          
#           SCORE=100
          
#           # Calculate total errors and warnings
#           TOTAL_ERRORS=$((erc_errors + drc_errors))
#           TOTAL_WARNINGS=$((erc_warnings + drc_warnings))
          
#           # Calculate deductions - errors have higher weight
#           ERROR_DEDUCTION=$((TOTAL_ERRORS * 2))  # Each error deducts 2 points
#           if [ "$ERROR_DEDUCTION" -gt 80 ]; then ERROR_DEDUCTION=80; fi
          
#           # Calculate warning deduction - lower weight
#           WARNING_DEDUCTION=$(echo "$TOTAL_WARNINGS * 0.2" | bc)  # Each warning deducts 0.2 points
#           if (( $(echo "$WARNING_DEDUCTION > 20" | bc -l) )); then
#             WARNING_DEDUCTION=20
#           fi
          
#           # Apply deductions
#           SCORE=$(echo "$SCORE - $ERROR_DEDUCTION - $WARNING_DEDUCTION" | bc)
          
#           # Ensure score stays within bounds
#           if (( $(echo "$SCORE > 100" | bc -l) )); then SCORE=100; fi
#           if (( $(echo "$SCORE < 0" | bc -l) )); then SCORE=0; fi

#           # Round to nearest integer
#           FINAL_SCORE=$(echo "scale=0; $SCORE / 1" | bc)

#           echo "FINAL_SCORE=$FINAL_SCORE" >> $GITHUB_ENV
#           echo "ERROR_DEDUCTION=$ERROR_DEDUCTION" >> $GITHUB_ENV
#           echo "WARNING_DEDUCTION=$WARNING_DEDUCTION" >> $GITHUB_ENV

#       - name: Output Results
#         run: |
#           echo "### PCB Check Results" >> $GITHUB_STEP_SUMMARY
#           if [ "$NO_SUBMISSION" = "true" ]; then
#             echo "- **No PCB files submitted**" >> $GITHUB_STEP_SUMMARY
#             echo "- **Final Score:** 0/100" >> $GITHUB_STEP_SUMMARY
#           else
#             echo "- **ERC Errors:** $erc_errors" >> $GITHUB_STEP_SUMMARY
#             echo "- **ERC Warnings:** $erc_warnings" >> $GITHUB_STEP_SUMMARY
#             echo "- **DRC Errors:** $drc_errors" >> $GITHUB_STEP_SUMMARY
#             echo "- **DRC Warnings:** $drc_warnings" >> $GITHUB_STEP_SUMMARY
#             echo "- **Error Deduction:** $ERROR_DEDUCTION" >> $GITHUB_STEP_SUMMARY
#             echo "- **Warning Deduction:** $WARNING_DEDUCTION" >> $GITHUB_STEP_SUMMARY
#             echo "- **Final Score:** $FINAL_SCORE/100" >> $GITHUB_STEP_SUMMARY
#           fi

#       - name: Commit and Push Score
#         run: |
#           # Clean up any previous score file
#           if [ -f "pcb_score.txt" ]; then
#             git rm -f pcb_score.txt >/dev/null 2>&1 || true
#           fi
          
#           # Create new score file
#           echo "$FINAL_SCORE" > pcb_score.txt
          
#           # Configure git
#           git config --global user.name "github-actions[bot]"
#           git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
#           # Add and commit only the score file
#           git add pcb_score.txt
          
#           # Check if there are changes to commit
#           if ! git diff-index --quiet HEAD --; then
#             git commit -m "Automated PCB Check: Score $FINAL_SCORE/100"
#             git push
#           else
#             echo "No changes to commit"
#           fi

#       - name: Clean Up Artifacts
#         if: always()
#         run: |
#           # Archive the check files for potential debugging
#           tar czf pcb_checks.tar.gz pcb_checks/ || true
#           # Remove the temporary files
#           rm -rf pcb_checks/ || true
